<*
 SDL Events
 For more information, see
 https://wiki.libsdl.org/SDL3/CategoryEvents
 TODO: add missing documentation
*>
module sdl::events;

import sdl::camera;
import sdl::audio;
import sdl::joystick;

enum SDLEventType : const uint
{
    FIRST     = 0,     // Unused (do not remove)

    // Application events
    QUIT      = 0x100, // User-requested quit

    // These application events have special meaning on iOS and Android, see README-ios.md and README-android.md for details
    TERMINATING,      // The application is being terminated by the OS. This event must be handled in a callback set with SDL_AddEventWatch().
                      //               Called on iOS in applicationWillTerminate()
                      //               Called on Android in onDestroy()

    LOW_MEMORY,       // The application is low on memory, free memory if possible. This event must be handled in a callback set with SDL_AddEventWatch().
                      //               Called on iOS in applicationDidReceiveMemoryWarning()
                      //               Called on Android in onTrimMemory()

    WILL_ENTER_BACKGROUND, // The application is about to enter the background. This event must be handled in a callback set with SDL_AddEventWatch().
                           //             Called on iOS in applicationWillResignActive()
                           //             Called on Android in onPause()

    DID_ENTER_BACKGROUND, // The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with SDL_AddEventWatch().
                          //           Called on iOS in applicationDidEnterBackground()
                          //           Called on Android in onPause()

    WILL_ENTER_FOREGROUND, // The application is about to enter the foreground. This event must be handled in a callback set with SDL_AddEventWatch().
                           //          Called on iOS in applicationWillEnterForeground()
                           //          Called on Android in onResume()

    DID_ENTER_FOREGROUND, // The application is now interactive. This event must be handled in a callback set with SDL_AddEventWatch().
                          //           Called on iOS in applicationDidBecomeActive()
                          //           Called on Android in onResume()


    LOCALE_CHANGED,  // The user's locale preferences have changed.

    SYSTEM_THEME_CHANGED, // The system theme changed

    // Display events
    // 0x150 was SDL_DISPLAYEVENT, reserve the number for sdl2-compat
    DISPLAY_ORIENTATION = 0x151,   // Display orientation has changed to data1
    DISPLAY_ADDED,                 // Display has been added to the system
    DISPLAY_REMOVED,               // Display has been removed from the system
    DISPLAY_MOVED,                 // Display has changed position
    DISPLAY_DESKTOP_MODE_CHANGED,  // Display has changed desktop mode
    DISPLAY_CURRENT_MODE_CHANGED,  // Display has changed current mode
    DISPLAY_CONTENT_SCALE_CHANGED, // Display has changed content scale
    DISPLAY_FIRST = DISPLAY_ORIENTATION,
    DISPLAY_LAST = DISPLAY_CONTENT_SCALE_CHANGED,

    // Window events
    // 0x200 was SDL_WINDOWEVENT, reserve the number for sdl2-compat
    // 0x201 was SDL_SYSWMEVENT, reserve the number for sdl2-compat
    WINDOW_SHOWN = 0x202,     // Window has been shown
    WINDOW_HIDDEN,            // Window has been hidden
    WINDOW_EXPOSED,           // Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event
    WINDOW_MOVED,             // Window has been moved to data1, data2
    WINDOW_RESIZED,           // Window has been resized to data1xdata2
    WINDOW_PIXEL_SIZE_CHANGED,// The pixel size of the window has changed to data1xdata2
    WINDOW_METAL_VIEW_RESIZED,// The pixel size of a Metal view associated with the window has changed
    WINDOW_MINIMIZED,         // Window has been minimized
    WINDOW_MAXIMIZED,         // Window has been maximized
    WINDOW_RESTORED,          // Window has been restored to normal size and position
    WINDOW_MOUSE_ENTER,       // Window has gained mouse focus
    WINDOW_MOUSE_LEAVE,       // Window has lost mouse focus
    WINDOW_FOCUS_GAINED,      // Window has gained keyboard focus
    WINDOW_FOCUS_LOST,        // Window has lost keyboard focus
    WINDOW_CLOSE_REQUESTED,   // The window manager requests that the window be closed
    WINDOW_HIT_TEST,          // Window had a hit test that wasn't SDL_HITTEST_NORMAL
    WINDOW_ICCPROF_CHANGED,   // The ICC profile of the window's display has changed
    WINDOW_DISPLAY_CHANGED,   // Window has been moved to display data1
    WINDOW_DISPLAY_SCALE_CHANGED, // Window display scale has been changed
    WINDOW_SAFE_AREA_CHANGED, // The window safe area has been changed
    WINDOW_OCCLUDED,          // The window has been occluded
    WINDOW_ENTER_FULLSCREEN,  // The window has entered fullscreen mode
    WINDOW_LEAVE_FULLSCREEN,  // The window has left fullscreen mode
    WINDOW_DESTROYED,         // The window with the associated ID is being or has been destroyed. If this message is being handled
                              //             in an event watcher, the window handle is still valid and can still be used to retrieve any properties
                              //             associated with the window. Otherwise, the handle has already been destroyed and all resources
                              //             associated with it are invalid
    WINDOW_HDR_STATE_CHANGED, // Window HDR properties have changed
    WINDOW_FIRST = WINDOW_SHOWN,
    WINDOW_LAST = WINDOW_HDR_STATE_CHANGED,

    // Keyboard events
    KEY_DOWN        = 0x300, // Key pressed
    KEY_UP,                  // Key released
    TEXT_EDITING,            // Keyboard text editing (composition)
    TEXT_INPUT,              // Keyboard text input
    KEYMAP_CHANGED,          // Keymap changed due to a system event such as an
                             //             input language or keyboard layout change.
    KEYBOARD_ADDED,          // A new keyboard has been inserted into the system
    KEYBOARD_REMOVED,        // A keyboard has been removed
    TEXT_EDITING_CANDIDATES, // Keyboard text editing candidates

    // Mouse events
    MOUSE_MOTION    = 0x400, // Mouse moved
    MOUSE_BUTTON_DOWN,       // Mouse button pressed
    MOUSE_BUTTON_UP,         // Mouse button released
    MOUSE_WHEEL,             // Mouse wheel motion
    MOUSE_ADDED,             // A new mouse has been inserted into the system
    MOUSE_REMOVED,           // A mouse has been removed

    // Joystick events
    JOYSTICK_AXIS_MOTION  = 0x600, // Joystick axis motion
    JOYSTICK_BALL_MOTION,          // Joystick trackball motion
    JOYSTICK_HAT_MOTION,           // Joystick hat position change
    JOYSTICK_BUTTON_DOWN,          // Joystick button pressed
    JOYSTICK_BUTTON_UP,            // Joystick button released
    JOYSTICK_ADDED,                // A new joystick has been inserted into the system
    JOYSTICK_REMOVED,              // An opened joystick has been removed
    JOYSTICK_BATTERY_UPDATED,      // Joystick battery level change
    JOYSTICK_UPDATE_COMPLETE,      // Joystick update is complete

    // Gamepad events
    GAMEPAD_AXIS_MOTION  = 0x650, // Gamepad axis motion
    GAMEPAD_BUTTON_DOWN,          // Gamepad button pressed
    GAMEPAD_BUTTON_UP,            // Gamepad button released
    GAMEPAD_ADDED,                // A new gamepad has been inserted into the system
    GAMEPAD_REMOVED,              // A gamepad has been removed
    GAMEPAD_REMAPPED,             // The gamepad mapping was updated
    GAMEPAD_TOUCHPAD_DOWN,        // Gamepad touchpad was touched
    GAMEPAD_TOUCHPAD_MOTION,      // Gamepad touchpad finger was moved
    GAMEPAD_TOUCHPAD_UP,          // Gamepad touchpad finger was lifted
    GAMEPAD_SENSOR_UPDATE,        // Gamepad sensor was updated
    GAMEPAD_UPDATE_COMPLETE,      // Gamepad update is complete
    GAMEPAD_STEAM_HANDLE_UPDATED, // Gamepad Steam handle has changed

    // Touch events
    FINGER_DOWN      = 0x700,
    FINGER_UP,
    FINGER_MOTION,
    FINGER_CANCELED,

    // 0x800, 0x801, and 0x802 were the Gesture events from SDL2. Do not reuse these values! sdl2-compat needs them!

    // Clipboard events
    CLIPBOARD_UPDATE = 0x900, // The clipboard or primary selection changed

    // Drag and drop events
    DROP_FILE        = 0x1000, // The system requests a file open
    DROP_TEXT,                 // text/plain drag-and-drop event
    DROP_BEGIN,                // A new set of drops is beginning (NULL filename)
    DROP_COMPLETE,             // Current set of drops is now complete (NULL filename)
    DROP_POSITION,             // Position while moving over the window

    // Audio hotplug events
    AUDIO_DEVICE_ADDED = 0x1100,  // A new audio device is available
    AUDIO_DEVICE_REMOVED,         // An audio device has been removed.
    AUDIO_DEVICE_FORMAT_CHANGED,  // An audio device's format has been changed by the system.

    // Sensor events
    SENSOR_UPDATE = 0x1200,     // A sensor was updated

    // Pressure-sensitive pen events
    PEN_PROXIMITY_IN = 0x1300,  // Pressure-sensitive pen has become available
    PEN_PROXIMITY_OUT,          // Pressure-sensitive pen has become unavailable
    PEN_DOWN,                   // Pressure-sensitive pen touched drawing surface
    PEN_UP,                     // Pressure-sensitive pen stopped touching drawing surface
    PEN_BUTTON_DOWN,            // Pressure-sensitive pen button pressed
    PEN_BUTTON_UP,              // Pressure-sensitive pen button released
    PEN_MOTION,                 // Pressure-sensitive pen is moving on the tablet
    PEN_AXIS,                   // Pressure-sensitive pen angle/pressure/etc changed

    // Camera hotplug events
    CAMERA_DEVICE_ADDED = 0x1400,  // A new camera device is available
    CAMERA_DEVICE_REMOVED,         // A camera device has been removed.
    CAMERA_DEVICE_APPROVED,        // A camera device has been approved for use by the user.
    CAMERA_DEVICE_DENIED,          // A camera device has been denied for use by the user.

    // Render events
    RENDER_TARGETS_RESET = 0x2000, // The render targets have been reset and their contents need to be updated
    RENDER_DEVICE_RESET, // The device has been reset and all textures need to be recreated
    RENDER_DEVICE_LOST, // The device has been lost and can't be recovered.

    // Reserved events for private platforms
    PRIVATE0 = 0x4000,
    PRIVATE1,
    PRIVATE2,
    PRIVATE3,

    // Internal events
    POLL_SENTINEL = 0x7F00, // Signals the end of an event poll cycle

    // Events USER through LAST are for your use,
    //  and should be allocated with SDL_RegisterEvents()

    USER    = 0x8000,

    // This last event is only for bounding internal arrays

    LAST    = 0xFFFF,

    // This just makes sure the enum is the size of uint
    ENUM_PADDING = 0x7FFFFFFF
}

struct SDLCommonEvent
{
    uint  type;        // Event type, shared with all events, uint to cover user events which are not in the SDL_EventType enumeration
    uint  reserved;
    ulong timestamp;   // In nanoseconds, populated using SDL_GetTicksNS()
}

struct SDLDisplayEvent
{
	inline SDLCommonEvent common; // SDL_DISPLAYEVENT_*
    SDLDisplayID display_id;      // The associated display
    int data1;                    // event dependent data
    int data2;                    // event dependent data
}

struct SDLWindowEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_WINDOW_*
    SDLWindowID window_id;        // The associated window
    int data1;                    // event dependent data
    int data2;                    // event dependent data
}

struct SDLKeyboardDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_KEYBOARD_ADDED or SDL_EVENT_KEYBOARD_REMOVED
    SDLKeyboardID which;          // The keyboard instance id
}

struct SDLKeyboardEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP
    SDLWindowID window_id;        // The window with keyboard focus, if any
    SDLKeyboardID which;          // The keyboard instance id, or 0 if unknown or virtual
    SDLScancode scancode;         // SDL physical key code
    SDLKeycode key;               // SDL virtual key code
    SDLKeymod mod;                // current key modifiers
    ushort raw;                   // The platform dependent scancode for this event
    bool down;                    // true if the key is pressed
    bool repeat;                  // true if this is a key repeat
}

struct SDLTextEditingEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_TEXT_EDITING
    SDLWindowID window_id;        // The window with keyboard focus, if any
    ZString text;                 // The editing text
    int start;                    // The start cursor of selected editing text, or -1 if not set
    int length;                   // The length of selected editing text, or -1 if not set
}

struct SDLTextEditingCandidatesEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_TEXT_EDITING_CANDIDATES
    SDLWindowID window_id;        // The window with keyboard focus, if any
    ZString* candidates;        // The list of candidates, or NULL if there are no candidates available
    int num_candidates;         // The number of strings in `candidates`
    int selected_candidate;     // The index of the selected candidate, or -1 if no candidate is selected
    bool horizontal;            // true if the list is horizontal, false if it's vertical
    char padding1;
    char padding2;
    char padding3;
}

struct SDLTextInputEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_TEXT_INPUT
    SDLWindowID window_id;        // The window with keyboard focus, if any
    ZString text;                 // The input text, UTF-8 encoded
}

struct SDLMouseDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_MOUSE_ADDED or SDL_EVENT_MOUSE_REMOVED
    SDLMouseID which;             // The mouse instance id
}

struct SDLMouseMotionEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_MOUSE_MOTION
    SDLWindowID window_id;        // The window with mouse focus, if any
    SDLMouseID which;             // The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0
    SDLMouseButtonFlags state;    // The current button state
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
    float xrel;                   // The relative motion in the X direction
    float yrel;                   // The relative motion in the Y direction
}

struct SDLMouseButtonEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_MOUSE_MOTION
    SDLWindowID window_id;        // The window with mouse focus, if any
    SDLMouseID which;             // The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0
    char button;                  // The mouse button index
    bool down;                    // true if the button is pressed
    char clicks;                  // 1 for single-click, 2 for double-click, etc.
    char padding;
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
}

struct SDLMouseWheelEvent
{
    inline SDLCommonEvent common;     // SDL_EVENT_MOUSE_WHEEL
    SDLWindowID window_id;            // The window with mouse focus, if any
    SDLMouseID which;                 // The mouse instance id in relative mode or 0
    float x;                          // The amount scrolled horizontally, positive to the right and negative to the left
    float y;                          // The amount scrolled vertically, positive away from the user and negative toward the user
    SDLMouseWheelDirection direction; // Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back
    float mouse_x;                    // X coordinate, relative to window
    float mouse_y;                    // Y coordinate, relative to window
    int integer_x;                    // The amount scrolled horizontally, accumulated to whole scroll "ticks" (added in 3.2.12)
    int integer_y;                    // The amount scrolled vertically, accumulated to whole scroll "ticks" (added in 3.2.12)
}

struct SDLJoyAxisEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_AXIS_MOTION
    SDLJoystickID which;          // The joystick instance id
    char axis;                    // The joystick axis index
    char padding1;
    char padding2;
    char padding3;
    short value;                  // The axis value (range: -32768 to 32767)
    ushort padding4;
}

struct SDLJoyBallEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_BALL_MOTION
    SDLJoystickID which;          // The joystick instance id
    char ball;                    // The joystick trackball index
    char padding1;
    char padding2;
    char padding3;
    short xrel;                   // The relative motion in the X direction
    short yrel;                   // The relative motion in the Y direction
}

struct SDLJoyHatEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_HAT_MOTION
    SDLJoystickID which;          // The joystick instance id
    char hat;                     // The joystick hat index
    char value;                   // The hat position value.
                                  // SDL_HAT_LEFTUP SDL_HAT_UP SDL_HAT_RIGHTUP
                                  // SDL_HAT_LEFT SDL_HAT_CENTERED SDL_HAT_RIGHT
                                  // SDL_HAT_LEFTDOWN SDL_HAT_DOWN SDL_HAT_RIGHTDOWN
                                  // Note that zero means the POV is centered.
    char padding1;
    char padding2;
}

struct SDLJoyButtonEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_BUTTON_DOWN or SDL_EVENT_JOYSTICK_BUTTON_UP
    SDLJoystickID which;          // The joystick instance id
    char button;                  // The joystick button index
    bool down;                    // true if the button is pressed
    char padding1;
    char padding2;
}

struct SDLJoyDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_ADDED or SDL_EVENT_JOYSTICK_REMOVED or SDL_EVENT_JOYSTICK_UPDATE_COMPLETE
    SDLJoystickID which;          // The joystick instance id
}

struct SDLJoyBatteryEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_JOYSTICK_BATTERY_UPDATED
    SDLJoystickID which;         // The joystick instance id
    SDLPowerState state;          // The joystick battery state
    int percent;                  // The joystick battery percent charge remaining
}

struct SDLGamepadAxisEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_GAMEPAD_AXIS_MOTION
    SDLJoystickID which;         // The joystick instance id
    char axis;                    // The gamepad axis (SDLGamepadAxis)
    char padding1;
    char padding2;
    char padding3;
    short value;                  // The axis value (range: -32768 to 32767)
    ushort padding4;
}

struct SDLGamepadButtonEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_GAMEPAD_BUTTON_DOWN or SDL_EVENT_GAMEPAD_BUTTON_UP
    SDLJoystickID which;          // The joystick instance id
    char button;                  // The gamepad button (SDL_GamepadButton)
    bool down;                    // true if the button is pressed
    char padding1;
    char padding2;
}

struct SDL_GamepadDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_GAMEPAD_ADDED, SDL_EVENT_GAMEPAD_REMOVED, or SDL_EVENT_GAMEPAD_REMAPPED, SDL_EVENT_GAMEPAD_UPDATE_COMPLETE or SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED
    SDLJoystickID which;          // The joystick instance id
}

struct SDLGamepadTouchpadEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or SDL_EVENT_GAMEPAD_TOUCHPAD_UP
    SDLJoystickID which;          // The joystick instance id
    int touchpad;                 // The index of the touchpad
    int finger;                   // The index of the finger on the touchpad
    float x;                      // Normalized in the range 0...1 with 0 being on the left
    float y;                      // Normalized in the range 0...1 with 0 being at the top
    float pressure;               // Normalized in the range 0...1
}

struct SDLGamepadSensorEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_GAMEPAD_SENSOR_UPDATE
    SDLJoystickID which;          // The joystick instance id
    int sensor;                   // The type of the sensor, one of the values of SDLSensorType
    float[3] data;                // Up to 3 values from the sensor, as defined in sdl3_sensor.c3i
    ulong sensor_timestamp;       // The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock
}

struct SDLAudioDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_AUDIO_DEVICE_ADDED, or SDL_EVENT_AUDIO_DEVICE_REMOVED, or SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED
    SDLAudioDeviceID which;       // SDLAudioDeviceID for the device being added or removed or changing
    bool recording;               // false if a playback device, true if a recording device.
    char padding1;
    char padding2;
    char padding3;
}

struct SDLCameraDeviceEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_CAMERA_DEVICE_ADDED, SDL_EVENT_CAMERA_DEVICE_REMOVED, SDL_EVENT_CAMERA_DEVICE_APPROVED, SDL_EVENT_CAMERA_DEVICE_DENIED
    SDLCameraID which;            // SDLCameraID for the device being added or removed or changing
}

struct SDLRenderEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_RENDER_TARGETS_RESET, SDL_EVENT_RENDER_DEVICE_RESET, SDL_EVENT_RENDER_DEVICE_LOST
    SDLWindowID window_id;        // The window containing the renderer in question.
}


struct SDLTouchFingerEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_FINGER_DOWN, SDL_EVENT_FINGER_UP, SDL_EVENT_FINGER_MOTION, or SDL_EVENT_FINGER_CANCELED
    SDLTouchID touch_id;          // The touch device id
    SDLFingerID finger_id;
    float x;                      // Normalized in the range 0...1
    float y;                      // Normalized in the range 0...1
    float dx;                     // Normalized in the range -1...1
    float dy;                     // Normalized in the range -1...1
    float pressure;               // Normalized in the range 0...1
    SDLWindowID window_id;        // The window underneath the finger, if any
}

struct SDLPenProximityEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_PEN_PROXIMITY_IN or SDL_EVENT_PEN_PROXIMITY_OUT
    SDLWindowID window_id;        // The window with pen focus, if any
    SDLPenID which;               // The pen instance id
}

struct SDLPenMotionEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_PEN_MOTION
    SDLWindowID window_id;        // The window with pen focus, if any
    SDLPenID which;               // The pen instance id
    SDLPenInputFlags pen_state;   // Complete pen input state at time of event
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
}

struct SDLPenTouchEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_PEN_DOWN or SDL_EVENT_PEN_UP
    SDLWindowID window_id;        // The window with pen focus, if any
    SDLPenID which;               // The pen instance id
    SDLPenInputFlags pen_state;   // Complete pen input state at time of event
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
    bool eraser;                  // true if eraser end is used (not all pens support this).
    bool down;                    // true if the pen is touching or false if the pen is lifted off
}

struct SDLPenButtonEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP
    SDLWindowID window_id;        // The window with pen focus, if any
    SDLPenID which;               // The pen instance id
    SDLPenInputFlags pen_state;   // Complete pen input state at time of event
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
    char button;                  // The pen button index (first button is 1).
    bool down;                    // true if the button is pressed
}

struct SDLPenAxisEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_PEN_AXIS
    SDLWindowID window_id;        // The window with pen focus, if any
    SDLPenID which;               // The pen instance id
    SDLPenInputFlags pen_state;   // Complete pen input state at time of event
    float x;                      // X coordinate, relative to window
    float y;                      // Y coordinate, relative to window
    SDLPenAxis axis;              // Axis that has changed
    float value;                  // New value of axis
}

struct SDLDropEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_DROP_BEGIN or SDL_EVENT_DROP_FILE or SDL_EVENT_DROP_TEXT or SDL_EVENT_DROP_COMPLETE or SDL_EVENT_DROP_POSITION
    SDLWindowID window_id;        // The window that was dropped on, if any
    float x;                      // X coordinate, relative to window (not on begin)
    float y;                      // Y coordinate, relative to window (not on begin)
    ZString source;               // The source app that sent this drop event, or NULL if that isn't available
    ZString data;                 // The text for SDL_EVENT_DROP_TEXT and the file name for SDL_EVENT_DROP_FILE, NULL for other events
}

struct SDLClipboardEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_CLIPBOARD_UPDATE
    bool owner;                   // are we owning the clipboard (internal update)
    int num_mime_types;           // number of mime types
    ZString* mime_types;          // current mime types
}

struct SDLSensorEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_SENSOR_UPDATE
    SDLSensorID which;            // The instance ID of the sensor
    float[6] data;                // Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData()
    ulong sensor_timestamp;       // The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock
}

struct SDLQuitEvent
{
    inline SDLCommonEvent common; // SDL_EVENT_QUIT
}

struct SDLUserEvent
{
	inline SDLCommonEvent common; // SDL_EVENT_USER through SDL_EVENT_LAST-1, uint because these are not in the SDL_EventType enumeration
	SDLWindowID window_id;        // The associated window if any
    int code;                     // User defined event code
    void* data1;                  // User defined data pointer
    void* data2;                  // User defined data pointer
}

union SDLEvent
{
    uint type;                             // Event type, shared with all events, uint to cover user events which are not in the SDL_EventType enumeration
    SDLCommonEvent common;                 // Common event data
    SDLDisplayEvent display;               // Display event data
    SDLWindowEvent window;                 // Window event data
    SDLKeyboardDeviceEvent kdevice;        // Keyboard device change event data
    SDLKeyboardEvent key;                  // Keyboard event data
    SDLTextEditingEvent edit;              // Text editing event data
    SDLTextEditingCandidatesEvent edit_candidates; // Text editing candidates event data
    SDLTextInputEvent text;                // Text input event data
    SDLMouseDeviceEvent mdevice;           // Mouse device change event data
    SDLMouseMotionEvent motion;            // Mouse motion event data
    SDLMouseButtonEvent button;            // Mouse button event data
    SDLMouseWheelEvent wheel;              // Mouse wheel event data
    SDLJoyDeviceEvent jdevice;             // Joystick device change event data
    SDLJoyAxisEvent jaxis;                 // Joystick axis event data
    SDLJoyBallEvent jball;                 // Joystick ball event data
    SDLJoyHatEvent jhat;                   // Joystick hat event data
    SDLJoyButtonEvent jbutton;             // Joystick button event data
    SDLJoyBatteryEvent jbattery;           // Joystick battery event data
    SDLGamepadDeviceEvent gdevice;         // Gamepad device event data
    SDLGamepadAxisEvent gaxis;             // Gamepad axis event data
    SDLGamepadButtonEvent gbutton;         // Gamepad button event data
    SDLGamepadTouchpadEvent gtouchpad;     // Gamepad touchpad event data
    SDLGamepadSensorEvent gsensor;         // Gamepad sensor event data
    SDLAudioDeviceEvent adevice;           // Audio device event data
    SDLCameraDeviceEvent cdevice;          // Camera device event data
    SDLSensorEvent sensor;                 // Sensor event data
    SDLQuitEvent quit;                     // Quit request event data
    SDLUserEvent user;                     // Custom event data
    SDLTouchFingerEvent tfinger;           // Touch finger event data
    SDLPenProximityEvent pproximity;       // Pen proximity event data
    SDLPenTouchEvent ptouch;               // Pen tip touching event data
    SDLPenMotionEvent pmotion;             // Pen motion event data
    SDLPenButtonEvent pbutton;             // Pen button event data
    SDLPenAxisEvent paxis;                 // Pen axis event data
    SDLRenderEvent render;                 // Render event data
    SDLDropEvent drop;                     // Drag and drop event data
    SDLClipboardEvent clipboard;           // Clipboard event data
    char[128] padding;
}

$assert(SDLEvent.sizeof == SDLEvent.padding.sizeof);

enum SDLEventAction
{
    ADDEVENT,  // Add events to the back of the queue.
    PEEKEVENT, // Check but don't remove events from the queue front.
    GETEVENT   // Retrieve/remove events from the front of the queue.
}

alias SDLEventFilter = fn bool(void* userdata, SDLEvent* event);

extern fn void pump_events() @extern("SDL_PumpEvents");
extern fn CInt peep_events(SDLEvent*  events, int num_events, SDLEventAction action, uint min_type, uint max_type) @extern("SDL_PeepEvents");
extern fn bool has_event(uint type) @extern("SDL_HasEvent");
extern fn bool has_events(uint min_type, uint max_type) @extern("SDL_HasEvent");
extern fn void flush_event(uint type) @extern("SDL_FlushEvent");
extern fn void flush_events(uint min_type, uint max_type) @extern("SDL_FlushEvents");
extern fn bool poll_event(SDLEvent* event) @extern("SDL_PollEvent");
extern fn bool wait_event(SDLEvent* event) @extern("SDL_WaitEvent");
extern fn bool wait_event_timeout(SDLEvent* event, int timeout_ms) @extern("SDL_WaitEventTimeout");
extern fn bool push_event(SDLEvent *event) @extern("SDL_PushEvent");
extern fn void set_event_filter(SDLEventFilter filter, void* userdata) @extern("SDL_SetEventFilter");
extern fn bool get_event_filter(SDLEventFilter* filter, void** userdata) @extern("SDL_GetEventFilter");
extern fn bool add_event_watch(SDLEventFilter filter, void* userdata) @extern("SDL_AddEventWatch");
extern fn void remove_event_watch(SDLEventFilter filter, void* userdata) @extern("SDL_RemoveEventWatch");
extern fn void filter_events(SDLEventFilter filter, void* userdata) @extern("SDL_FilterEvents");
extern fn void set_event_enabled(uint type, bool enabled) @extern("SDL_SetEventEnabled");
extern fn bool event_enabled(uint type) @extern("SDL_EventEnabled");
extern fn uint register_events(int num_events) @extern("SDL_RegisterEvents");
extern fn SDLWindow* get_window_from_event(SDL_Event* event) @extern("SDL_GetWindowFromEvent");
