<*
 SDL Gamepad
 For more information, see
 https://wiki.libsdl.org/SDL3/CategoryGamepad
 TODO: add missing documentation and check "SdlPropGamepadCap"
*>
module sdl::gamepad;

import sdl::guid;
import sdl::properties;
import sdl::joystick;

typedef SDLGamepad = void*;

enum SDLGamepadType : const
{
	GAMEPAD_TYPE_UNKNOWN = 0,
	GAMEPAD_TYPE_STANDARD,
	GAMEPAD_TYPE_XBOX360,
	GAMEPAD_TYPE_XBOXONE,
	GAMEPAD_TYPE_PS3,
	GAMEPAD_TYPE_PS4,
	GAMEPAD_TYPE_PS5,
	GAMEPAD_TYPE_NINTENDO_SWITCH_PRO,
	GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,
	GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,
	GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,
	GAMEPAD_TYPE_GAMECUBE,
	GAMEPAD_TYPE_COUNT
}

enum SDLGamepadButton : const
{
    GAMEPAD_BUTTON_INVALID = -1,
    GAMEPAD_BUTTON_SOUTH,           //Bottom face button (e.g. Xbox A button)
    GAMEPAD_BUTTON_EAST,            //Right face button (e.g. Xbox B button)
    GAMEPAD_BUTTON_WEST,            //Left face button (e.g. Xbox X button)
    GAMEPAD_BUTTON_NORTH,           //Top face button (e.g. Xbox Y button)
    GAMEPAD_BUTTON_BACK,
    GAMEPAD_BUTTON_GUIDE,
    GAMEPAD_BUTTON_START,
    GAMEPAD_BUTTON_LEFT_STICK,
    GAMEPAD_BUTTON_RIGHT_STICK,
    GAMEPAD_BUTTON_LEFT_SHOULDER,
    GAMEPAD_BUTTON_RIGHT_SHOULDER,
    GAMEPAD_BUTTON_DPAD_UP,
    GAMEPAD_BUTTON_DPAD_DOWN,
    GAMEPAD_BUTTON_DPAD_LEFT,
    GAMEPAD_BUTTON_DPAD_RIGHT,
    GAMEPAD_BUTTON_MISC1,           // Additional button (e.g. Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button, Google Stadia capture button)
    GAMEPAD_BUTTON_RIGHT_PADDLE1,   // Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1, DualSense Edge RB button, Right Joy-Con SR button)
    GAMEPAD_BUTTON_LEFT_PADDLE1,    // Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3, DualSense Edge LB button, Left Joy-Con SL button)
    GAMEPAD_BUTTON_RIGHT_PADDLE2,   // Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2, DualSense Edge right Fn button, Right Joy-Con SL button)
    GAMEPAD_BUTTON_LEFT_PADDLE2,    // Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4, DualSense Edge left Fn button, Left Joy-Con SR button)
    GAMEPAD_BUTTON_TOUCHPAD,        // PS4/PS5 touchpad button
    GAMEPAD_BUTTON_MISC2,           // Additional button
    GAMEPAD_BUTTON_MISC3,           // Additional button (e.g. Nintendo GameCube left trigger click)
    GAMEPAD_BUTTON_MISC4,           // Additional button (e.g. Nintendo GameCube right trigger click)
    GAMEPAD_BUTTON_MISC5,           // Additional button
    GAMEPAD_BUTTON_MISC6,           // Additional button
    GAMEPAD_BUTTON_COUNT
}

enum SDLGamepadButtonLabel
{
    GAMEPAD_BUTTON_LABEL_UNKNOWN,
    GAMEPAD_BUTTON_LABEL_A,
    GAMEPAD_BUTTON_LABEL_B,
    GAMEPAD_BUTTON_LABEL_X,
    GAMEPAD_BUTTON_LABEL_Y,
    GAMEPAD_BUTTON_LABEL_CROSS,
    GAMEPAD_BUTTON_LABEL_CIRCLE,
    GAMEPAD_BUTTON_LABEL_SQUARE,
    GAMEPAD_BUTTON_LABEL_TRIANGLE
}

enum SDLGamepadAxis : const
{
    GAMEPAD_AXIS_INVALID = -1,
    GAMEPAD_AXIS_LEFTX,
    GAMEPAD_AXIS_LEFTY,
    GAMEPAD_AXIS_RIGHTX,
    GAMEPAD_AXIS_RIGHTY,
    GAMEPAD_AXIS_LEFT_TRIGGER,
    GAMEPAD_AXIS_RIGHT_TRIGGER,
    GAMEPAD_AXIS_COUNT
}

enum SDLGamepadBindingType : const
{
    GAMEPAD_BINDTYPE_NONE = 0,
    GAMEPAD_BINDTYPE_BUTTON,
    GAMEPAD_BINDTYPE_AXIS,
    GAMEPAD_BINDTYPE_HAT
}

struct SDLGamepadBinding
{
    SDLGamepadBindingType input_type;
    union input
    {
        int button;

        struct axis
        {
            int axis;
            int axis_min;
            int axis_max;
        }

        struct hat
        {
            int hat;
            int hat_mask;
        }

    }

    SDLGamepadBindingType output_type;
    union output
    {
        SDLGamepadButton button;

        struct axis
        {
            SDLGamepadAxis axis;
            int axis_min;
            int axis_max;
        }

    }
}

extern fn CInt add_gamepad_mapping(ZString mapping) @extern("SDL_AddGamepadMapping");
extern fn CInt add_gamepad_mapping_from_io(SDLIOStream* src, bool closeio) @extern("SDL_AddGamepadMappingsFromIO");
extern fn CInt add_gamepad_mappings_from_file(ZString file) @extern("SDL_AddGamepadMappingsFromFile");
extern fn bool reload_gamepad_mappings() @extern("SDL_ReloadGamepadMappings");
extern fn ZString* get_gamepad_mappings(CInt* count) @extern("SDL_GetGamepadMappings");
extern fn ZString get_gamepad_mapping_for_guid(SDLGuid guid) @extern("SDL_GetGamepadMappingForGUID");
extern fn ZString SDLGamepad.get_gamepad_mapping(&gamepad) @extern("SDL_GetGamepadMapping");
extern fn bool set_gamepad_mapping(SDLJoystickID instance_id, ZString mapping) @extern("SDL_SetGamepadMapping");
extern fn bool has_gamepad() @extern("SDL_HasGamepad");
extern fn SDLJoystickID* get_gamepads(int* count) @extern("SDL_GetGamepads");
extern fn bool is_gamepad(SDLJoystickID instance_id) @extern("SDL_IsGamepad");
extern fn ZString get_gamepad_name_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadNameForID");
extern fn ZString get_gamepad_path_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadPathForID");
extern fn CInt get_gamepad_index_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadIndexForID");
extern fn SDLGuid get_gamepad_guid_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadGUIDForID");
extern fn ushort get_gamepad_vendor_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadVendorForID");
extern fn ushort get_gamepad_product_version_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadProductVersionForID");
extern fn SDLGamepadType get_gamepad_type_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadTypeForID");
extern fn SDLGamepadType get_real_gamepad_type_for_id(SDLJoystickID instance_id) @extern("SDL_GetRealGamepadTypeForID");
extern fn ZString get_gamepad_mapping_for_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadMappingForID");
extern fn SDLGamepad* open_gamepad(SDLJoystickID instance_id) @extern("SDL_OpenGamepad");
extern fn SDLGamepad* get_gamepad_from_id(SDLJoystickID instance_id) @extern("SDL_GetGamepadFromID");
extern fn SDLGamepad* get_gamepad_from_player_index(int player_index) @extern("SDL_GetGamepadFromPlayerIndex");
extern fn SDLPropertiesID SDLGamepad.get_gamepad_properties(&gamepad) @extern("SDL_GetGamepadProperties");

//TODO: check if this is correct
enum SdlPropGamepadCap : const SDLPropertiesID
{
	MONO_LED_BOOLEAN       = MONO_LED_BOOLEAN,
	RGB_LED_BOOLEAN        = RGB_LED_BOOLEAN,
	PLAYER_LED_BOOLEAN     = PLAYER_LED_BOOLEAN,
	RUMBLE_BOOLEAN         = RUMBLE_BOOLEAN,
	TRIGGER_RUMBLE_BOOLEAN = TRIGGER_RUMBLE_BOOLEAN
}

extern fn SDLJoystickID SDLGamepad.get_gamepad_id(&gamepad) @extern("SDL_GetGamepadID");
extern fn ZString SDLGamepad.get_gamepad_name(&gamepad) @extern("SDL_GetGamepadName");
extern fn ZString SDLGamepad.get_gamepad_path(&gamepad) @extern("SDL_GetGamepadPath");
extern fn SDLGamepadType SDLGamepad.get_gamepad_type(&gamepad) @extern("SDL_GetGamepadType");
extern fn SDLGamepadType SDLGamepad.get_real_gamepad_path(&gamepad) @extern("SDL_GetRealGamepadType");
extern fn CInt SDLGamepad.get_gamepad_player_index(&gamepad) @extern("SDL_GetGamepadPlayerIndex");
extern fn bool SDLGamepad.set_gamepad_player_index(&gamepad, CInt player_index) @extern("SDL_SetGamepadPlayerIndex");
extern fn ushort SDLGamepad.get_gamepad_vendor(&gamepad) @extern("SDL_GetGamepadVendor");
extern fn ushort SDLGamepad.get_gamepad_product(&gamepad) @extern("SDL_GetGamepadProduct");
extern fn ushort SDLGamepad.get_gamepad_product_version(&gamepad) @extern("SDL_GetGamepadProductVersion");
extern fn ushort SDLGamepad.get_gamepad_firmware_version(&gamepad) @extern("SDL_GetGamepadFirmwareVersion");
extern fn ZString SDLGamepad.get_gamepad_serial(&gamepad) @extern("SDL_GetGamepadSerial");
extern fn ulong SDLGamepad.get_gamepad_steam_handle(&gamepad) @extern("SDL_GetGamepadSteamHandle");
extern fn SDLJoystickConnectionState SDLGamepad.get_gamepad_connection_state(&gamepad) @extern("SDL_GetGamepadConnectionState");
extern fn SDLPowerState SDLGamepad.get_gamepad_power_info(&gamepad, CInt* percent) @extern("SDL_GetGamepadPowerInfo");
extern fn bool SDLGamepad.gamepad_connected(&gamepad) @extern("SDL_GamepadConnected");
extern fn SDLJoystick* SDLGamepad.get_gamepad_joystick(&gamepad) @extern("SDL_GetGamepadJoystick");
extern fn void set_gamepad_events_enabled(bool enabled) @extern("SDL_SetGamepadEventsEnabled");
extern fn bool gamepad_events_enabled() @extern("SDL_GamepadEventsEnabled");
extern fn SDLGamepadBinding** SDLGamepad.get_gamepad_bindings(&gamepad, CInt* count) @extern("SDL_GetGamepadBindings");
extern fn void update_gamepads() @extern("SDL_UpdateGamepads");
extern fn SDLGamepadType get_gamepad_type_from_string(ZString str) @extern("SDL_GetGamepadTypeFromString");
extern fn ZString get_gamepad_string_from_type(SDLGamepadType type) @extern("SDL_GetGamepadStringForType");
extern fn SDLGamepadAxis get_gamepad_axis_from_string(ZString str) @extern("SDL_GetGamepadAxisFromString");
extern fn ZString get_gamepad_string_from_axis(SDLGamepadAxis axis) @extern("SDL_GetGamepadStringForAxis");
extern fn bool SDLGamepad.gamepad_has_axis(&gamepad, SDLGamepadAxis axis) @extern("SDL_GamepadHasAxis");
extern fn short SDLGamepad.get_gamepad_axis(&gamepad, SDLGamepadAxis axis) @extern("SDL_GetGamepadAxis");
extern fn SDLGamepadButton get_gamepad_button_from_string(ZString str) @extern("SDL_GetGamepadButtonFromString");
extern fn ZString get_gamepad_string_for_button(SDLGamepadButton button) @extern("SDL_GetGamepadStringForButton");
extern fn bool SDLGamepad.gamepad_has_button(&gamepad, SDLGamepadButton button) @extern("SDL_GamepadHasButton");
extern fn bool SDLGamepad.get_gamepad_button(&gamepad, SDLGamepadButton button) @extern("SDL_GetGamepadButton");
extern fn SDLGamepadButtonLabel get_gamepad_button_label_for_type(SDLGamepadType type, SDLGamepadButton button) @extern("SDL_GetGamepadButtonLabelForType");
extern fn SDLGamepadButtonLabel SDLGamepad.get_gamepad_button_label(&gamepad, SDLGamepadButton button) @extern("SDL_GetGamepadButtonLabel");
extern fn CInt SDLGamepad.get_num_gamepad_touchpads(&gamepad) @extern("SDL_GetNumGamepadTouchpads");
extern fn CInt SDLGamepad.get_num_gamepad_touchpads_fingers(&gamepad, CInt touchpads) @extern("SDL_GetNumGamepadTouchpadFingers");
extern fn bool SDLGamepad.get_gamepad_touchpad_finger(&gamepad, CInt touchpad, CInt finger, bool* down, float* x, float* y, float* pressure) @extern("SDL_GetGamepadTouchpadFinger");
extern fn bool SDLGamepad.gamepad_has_sensor(&gamepad, SDLSensorType type) @extern("SDL_GamepadHasSensor");
extern fn bool SDLGamepad.set_gamepad_sensor_enabled(&gamepad, SDLSensorType type, bool enabled) @extern("SDL_SetGamepadSensorEnabled");
extern fn bool SDLGamepad.gamepad_sensor_enabled(&gamepad, SDLSensorType type) @extern("SDL_GamepadSensorEnabled");
extern fn float SDLGamepad.get_gamepad_sensor_data_rate(&gamepad, SDLSensorType type) @extern("SDL_GetGamepadSensorDataRate");
extern fn bool SDLGamepad.get_gamepad_sensor_data(&gamepad, SDLSensorType type, float* data, CInt num_values) @extern("SDL_GetGamepadSensorData");
extern fn bool SDLGamepad.rumble_gamepad(&gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms) @extern("SDL_RumbleGamepad");
extern fn bool SDLGamepad.rumble_gamepad_triggers(&gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms) @extern("SDL_RumbleGamepadTriggers");
extern fn bool SDLGamepad.set_gamepad_led(&gamepad, char red, char green, char blue) @extern("SDL_SetGamepadLED");
extern fn bool SDLGamepad.set_gamepad_effect(&gamepad, void* data, CInt size) @extern("SDL_SendGamepadEffect");
extern fn void SDLGamepad.close_gamepad(&gamepad) @extern("SDL_CloseGamepad");
extern fn ZString SDLGamepad.get_gamepad_apple_sf_symbols_name_for_button(&gamepad, SDLGamepadButton button) @extern("SDL_GetGamepadAppleSFSymbolsNameForButton");
extern fn ZString SDLGamepad.get_gamepad_apple_sf_symbols_name_for_axis(&gamepad, SDLGamepadAxis axis) @extern("SDL_GetGamepadAppleSFSymbolsNameForAxis");

