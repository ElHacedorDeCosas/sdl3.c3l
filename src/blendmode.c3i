<*
 SDL Blending Modes
 For more information, see
 https://wiki.libsdl.org/SDL3/CategoryBlendmode
*>
module sdl::blendmode;

import sdl::stdinc;

<*
 A set of blend modes used in drawing operations.
 This datatype is available since SDL 3.2.0.

 These predefined blend modes are supported everywhere.

 Additional values may be obtained from SDL_ComposeCustomBlendMode.
*>
typedef SDLBlendMode = uint;

const SDLBlendMode BLENDMODE_NONE                  = 0x00000000u; // no blending: dstRGBA = srcRGBA
const SDLBlendMode BLENDMODE_BLEND                 = 0x00000001u; // alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA + (dstA * (1-srcA))
const SDLBlendMode BLENDMODE_BLEND_PREMULTIPLIED   = 0x00000010u; // pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA))
const SDLBlendMode BLENDMODE_ADD                   = 0x00000002u; // additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA
const SDLBlendMode BLENDMODE_ADD_PREMULTIPLIED     = 0x00000020u; // pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA
const SDLBlendMode BLENDMODE_MOD                   = 0x00000004u; // color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA
const SDLBlendMode BLENDMODE_MUL                   = 0x00000008u; // color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA
const SDLBlendMode BLENDMODE_INVALID               = 0x7FFFFFFFu;

<*
 The blend operation used when combining source and destination pixel
 components.
 This enum is available since SDL 3.2.0.
*>
enum SDLBlendOperation : const CInt
{
    ADD              = 0x1,  // dst + src: supported by all renderers
    SUBTRACT         = 0x2,  // src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan
    REV_SUBTRACT     = 0x3,  // dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan
    MINIMUM          = 0x4,  // min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan
    MAXIMUM          = 0x5   // max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan
}

<*
 The normalized factor used to multiply pixel components.
 This enum is available since SDL 3.2.0.

 The blend factors are multiplied with the pixels from a drawing operation
 (src) and the pixels from the render target (dst) before the blend
 operation. The comma-separated factors listed above are always applied in
 the component order red, green, blue, and alpha.
*>
enum SDLBlendFactor : const CInt
{
    BLENDFACTOR_ZERO                = 0x1,  // 0, 0, 0, 0
    BLENDFACTOR_ONE                 = 0x2,  // 1, 1, 1, 1
    BLENDFACTOR_SRC_COLOR           = 0x3,  // srcR, srcG, srcB, srcA
    BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,  // 1-srcR, 1-srcG, 1-srcB, 1-srcA
    BLENDFACTOR_SRC_ALPHA           = 0x5,  // srcA, srcA, srcA, srcA
    BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,  // 1-srcA, 1-srcA, 1-srcA, 1-srcA
    BLENDFACTOR_DST_COLOR           = 0x7,  // dstR, dstG, dstB, dstA
    BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,  // 1-dstR, 1-dstG, 1-dstB, 1-dstA
    BLENDFACTOR_DST_ALPHA           = 0x9,  // dstA, dstA, dstA, dstA
    BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA   // 1-dstA, 1-dstA, 1-dstA, 1-dstA
}

<*
 Compose a custom blend mode for renderers.
 This function is available since SDL 3.2.0.

 The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept
 the SDL_BlendMode returned by this function if the renderer supports it.

 A blend mode controls how the pixels from a drawing operation (source) get
 combined with the pixels from the render target (destination). First, the
 components of the source and destination pixels get multiplied with their
 blend factors. Then, the blend operation takes the two products and
 calculates the result that will get stored in the render target.

 Expressed in pseudocode, it would look like this:

 ```c
 dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);
 dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);
 ```

 Where the functions `colorOperation(src, dst)` and `alphaOperation(src,
 dst)` can return one of the following:

 - `src + dst`
 - `src - dst`
 - `dst - src`
 - `min(src, dst)`
 - `max(src, dst)`

 The red, green, and blue components are always multiplied with the first,
 second, and third components of the SDL_BlendFactor, respectively. The
 fourth component is not used.

 The alpha component is always multiplied with the fourth component of the
 SDL_BlendFactor. The other components are not used in the alpha
 calculation.

 Support for these blend modes varies for each renderer. To check if a
 specific SDL_BlendMode is supported, create a renderer and pass it to
 either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will
 return with an error if the blend mode is not supported.

 This list describes the support of custom blend modes for each renderer.
 All renderers support the four blend modes listed in the SDL_BlendMode
 enumeration.

 - **direct3d**: Supports all operations with all factors. However, some
   factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and
   `SDL_BLENDOPERATION_MAXIMUM`.
 - **direct3d11**: Same as Direct3D 9.
 - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all
   factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.
 - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,
   `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`
   operations with all factors.
 - **psp**: No custom blend mode support.
 - **software**: No custom blend mode support.

 Some renderers do not provide an alpha component for the default render
 target. The `SDL_BLENDFACTOR_DST_ALPHA` and
 `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this
 case.

 threadsafety: It is safe to call this function from any thread.

 @param src_color_factor : `the SDL_BlendFactor applied to the red, green, and blue components of the source pixels.`
 @param dst_color_factor : `the SDL_BlendFactor applied to the red, green, and blue components of the destination pixels.`
 @param color_operation : `the SDL_BlendOperation used to combine the red, green, and blue components of the source and destination pixels.`
 @param src_alpha_factor : `the SDL_BlendFactor applied to the alpha component of the source pixels.`
 @param dst_alpha_factor : `the SDL_BlendFactor applied to the alpha component of the destination pixels.`
 @param alpha_operation : `the SDL_BlendOperation used to combine the alpha component of the source and destination pixels.`
 @return `an SDL_BlendMode that represents the chosen factors and operations.`
*>
extern fn SDLBlendMode compose_custom_blend_mode(SDLBlendFactor src_color_factor,
                                                 SDLBlendFactor dst_color_factor,
                                                 SDLBlendOperation color_operation,
                                                 SDLBlendFactor src_alpha_factor,
                                                 SDLBlendFactor dst_alpha_factor,
                                                 SDLBlendOperation alpha_operation) @extern("SDL_ComposeCustomBlendMode");
