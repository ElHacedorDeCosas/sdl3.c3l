<*
 SDL FileSystem
 For more information, see
 https://wiki.libsdl.org/SDL3/CategoryFileSystem
 TODO: add missing documentation
*>
module sdl::filesystem;

import sdl::stdinc;

extern fn ZString get_base_path() @extern("SDL_GetBasePath");
extern fn ZString get_pref_path(ZString org, ZString app) @extern("SDL_GetPrefPath");

enum SDLFolder
{
    HOME,        // The folder which contains all of the current user's data, preferences, and documents. It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents. 
    DESKTOP,     // The folder of files that are displayed on the desktop. Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons. 
    DOCUMENTS,   // User document files, possibly application-specific. This is a good place to save a user's projects. 
    DOWNLOADS,   // Standard folder for user files downloaded from the internet. 
    MUSIC,       // Music files that can be played using a standard music player (mp3, ogg...). 
    PICTURES,    // Image files that can be displayed using a standard viewer (png, jpg...). 
    PUBLICSHARE, // Files that are meant to be shared with other users on the same computer. 
    SAVEDGAMES,  // Save files for games. 
    SCREENSHOTS, // Application screenshots. 
    TEMPLATES,   // Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as "New Text File.txt".  Any file in the Templates folder can be used as a starting point for a new file. 
    VIDEOS,      // Video files that can be played using a standard video player (mp4, webm...). 
    COUNT        // Total number of types in this enum, not a folder type by itself. 
}

extern fn ZString get_user_folder(SDLFolder folder) @extern("SDL_GetUserFolder");

enum SDLPathType
{
    NONE,      // path does not exist 
    FILE,      // a normal file 
    DIRECTORY, // a directory 
    OTHER      // something completely different like a device node (not a symlink, those are always followed) 
}

struct SDLPathInfo
{
    SDLPathType type;      // the path type 
    ulong size;            // the file size in bytes 
    SDLTime create_time;   // the time when the path was created 
    SDLTime modify_time;   // the last time the path was modified 
    SDLTime access_time;   // the last time the path was read 
}

typedef SDLGlobFlags = uint;

const SDLGlobFlags GLOB_CASEINSENSITIVE = 1u << 0;

extern fn bool create_directory(ZString path) @extern("SDL_CreateDirectory");

enum SDLEnumerationResult
{
    CONTINUE,   // Value that requests that enumeration continue. 
    SUCCESS,    // Value that requests that enumeration stop, successfully. 
    FAILURE     // Value that requests that enumeration stop, as a failure. 
}

alias SDLEnumerateDirectoryCallback = fn SDLEnumerationResult(void* userdata, ZString dirname, ZString fname);

extern fn bool enumerate_directory(ZString path, SDLEnumerateDirectoryCallback callback, void* userdata) @extern("SDL_EnumerateDirectory");
extern fn bool remove_path(ZString path) @extern("SDL_RemovePath");
extern fn bool rename_path(ZString oldpath, ZString newpath) @extern("SDL_RenamePath");
extern fn bool copy_file(ZString oldpath, ZString newpath) @extern("SDL_CopyFile");
extern fn bool get_path_info(ZString path, SDLPathInfo* info) @extern("SDL_GetPathInfo");
extern fn ZString* glob_directory(ZString path, ZString* pattern, SDLGlobFlags flags, int* count) @extern("SDL_GlobDirectory");
extern fn ZString get_current_directory() @extern("SDL_GetCurrentDirectory");
